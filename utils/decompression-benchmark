#!/usr/bin/python3

import sys, subprocess, glob
from collections import defaultdict

import densityplot 

if not 2 <= len(sys.argv) <= 3:
    print('usage: {0} <pattern> <trials, default: 10>'.format(sys.argv[0]))
    sys.exit(-1)

prefix      = 'benchmarks/decompression'
suffix      = 'decompression-benchmark'
baseline    = '{0}/baseline/main'.format(prefix)
swift       = '.build/release/{0}'.format(suffix)

pattern     = sys.argv[1]
trials      = int(sys.argv[2]) if len(sys.argv) == 3 else 10

build_c_invocation      = ('clang', '-Wall', '-Wpedantic', '-lpng', 
    '{0}.c'.format(baseline), '-o', baseline)
print(' '.join(build_c_invocation))
build_c                 = subprocess.run(build_c_invocation)

if build_c.returncode != 0:
    sys.exit(-1)

build_swift_invocation  = 'swift', 'build', '-c', 'release', '--product', suffix

print(' '.join(build_swift_invocation))
build_swift             = subprocess.run(build_swift_invocation)
if build_swift.returncode != 0:
    sys.exit(-1)

series = defaultdict(list)
for file in glob.glob('{0}/in/{1}.png'.format(prefix, pattern)):
    remaining = trials 
    while remaining > 0:
        count               = min(remaining, 10)
        baseline_invocation = baseline, file, str(count)
        swift_invocation    = swift,    file, str(count)
        
        print(' '.join(baseline_invocation))
        baseline_result     = subprocess.run(baseline_invocation, capture_output = True)
        
        if baseline_result.returncode == 0:
            string = baseline_result.stdout.decode('utf-8')
            print(string, end = '')
            series['baseline'].extend(map(float, string.split()))
        else:
            print(baseline_result.stderr.decode('utf-8'), end = '')
        
        print(' '.join(swift_invocation))
        swift_result        = subprocess.run(swift_invocation, capture_output = True)
        
        if swift_result.returncode == 0:
            string = swift_result.stdout.decode('utf-8')
            print(string, end = '')
            series['swift'].extend(map(float, string.split()))
        else:
            print(swift_result.stderr.decode('utf-8'), end = '')
            
        remaining -= 10

with open('plot.svg', 'w') as file:
    file.write(densityplot.plot(series, smoothing = 0.6, colors = {'baseline': '#aaaaaaff', 'swift': '#ff694eff'}))
